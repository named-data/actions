name: Publish container image
on:
  workflow_call:
    inputs:
      name:
        description: 'Last component of the image name'
        required: true
        type: string
      dockerfile:
        description: 'Path to the Dockerfile'
        default: Dockerfile
        type: string
      target:
        description: 'Target stage to build'
        type: string
      build-args:
        description: 'List of build-time variables'
        type: string
      contexts:
        description: 'List of additional build contexts'
        type: string
      tag-with-branch:
        description: 'Whether to tag the image with the git branch name'
        default: true
        type: boolean
      tag-with-sha:
        description: 'Whether to tag the image with the git commit SHA'
        default: false
        type: boolean
      attest:
        description: 'Whether to publish a signed provenance attestation for the image'
        default: true
        type: boolean
    outputs:
      image:
        description: 'Full name and digest of the published image'
        value: ${{ jobs.prepare.outputs.image-name }}@${{ jobs.finalize.outputs.image-digest }}

jobs:
  prepare:
    if: >-
      github.event_name == 'push' || github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository_owner == 'named-data')
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      image-name: ${{ steps.prepare.outputs.image-name }}
      timestamp: ${{ steps.prepare.outputs.timestamp }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Prepare outputs
        id: prepare
        env:
          SLUG: ${{ github.repository_owner }}/${{ inputs.name }}
        run: |
          tee -a "$GITHUB_OUTPUT" <<EOF
          image-name=ghcr.io/${SLUG,,}
          timestamp=$(git log -1 --format=%ct)
          EOF

  build:
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    needs: prepare
    permissions:
      packages: write
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    env:
      SOURCE_DATE_EPOCH: ${{ needs.prepare.outputs.timestamp }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Generate metadata for ${{ matrix.arch }} image
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=match,pattern=\d.*
            type=raw,value={{date 'YYYYMMDD'}},enable=${{ github.event_name == 'workflow_dispatch' }},priority=700
            type=ref,event=branch,enable=${{ inputs.tag-with-branch }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,enable=${{ inputs.tag-with-sha }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.arch }} image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          platforms: linux/${{ matrix.arch }}
          file: ${{ inputs.dockerfile }}
          target: ${{ inputs.target }}
          build-args: |
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
            ${{ inputs.build-args }}
          build-contexts: ${{ inputs.contexts }}
          pull: true
          outputs: type=registry,name=${{ needs.prepare.outputs.image-name }},name-canonical=true,push-by-digest=true
          provenance: mode=max
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
        env:
          DOCKER_BUILD_SUMMARY: ${{ runner.debug == 1 }}
          DOCKER_BUILD_RECORD_RETENTION_DAYS: 15

      - name: Export digest
        working-directory: ${{ runner.temp }}
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          mkdir digests
          touch digests/"${DIGEST#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digest_${{ inputs.name }}_${{ matrix.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  finalize:
    runs-on: ubuntu-24.04
    needs: [prepare, build]
    permissions:
      packages: write
    outputs:
      image-digest: ${{ steps.inspect.outputs.digest }}
    env:
      SOURCE_DATE_EPOCH: ${{ needs.prepare.outputs.timestamp }}
    steps:
      - name: Download digests
        id: download
        uses: actions/download-artifact@v4
        with:
          pattern: digest_${{ inputs.name }}_*
          path: ${{ runner.temp }}/digests
          merge-multiple: true

      - name: Delete temporary artifacts
        continue-on-error: true
        uses: geekyeggo/delete-artifact@f275313e70c08f6120db482d7a6b98377786765b # v5.1.0
        with:
          name: digest_${{ inputs.name }}_*

      - name: Generate metadata for image index
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ needs.prepare.outputs.image-name }}
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=match,pattern=\d.*
            type=raw,value={{date 'YYYYMMDD'}},enable=${{ github.event_name == 'workflow_dispatch' }},priority=700
            type=ref,event=branch,enable=${{ inputs.tag-with-branch }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,enable=${{ inputs.tag-with-sha }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: index

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform image index
        working-directory: ${{ steps.download.outputs.download-path }}
        env:
          IMAGE_NAME: ${{ needs.prepare.outputs.image-name }}
        run: |
          readarray -t annotations < <(jq -r '.annotations[] | ("--annotation", .)' <<< "${DOCKER_METADATA_OUTPUT_JSON}")
          readarray -t tags < <(jq -r '.tags[] | ("--tag", .)' <<< "${DOCKER_METADATA_OUTPUT_JSON}")
          readarray -t refs < <(find . -type f -printf "${IMAGE_NAME}@sha256:%f\n")
          docker buildx imagetools create "${annotations[@]}" "${tags[@]}" "${refs[@]}"

      - name: Inspect final image and prepare outputs
        id: inspect
        env:
          SHORT_NAME: ${{ inputs.name }}
          NAME_AND_TAG: "${{ needs.prepare.outputs.image-name }}:${{ steps.meta.outputs.version }}"
        run: |
          manifest=$(docker buildx imagetools inspect --format '{{json .Manifest}}' "${NAME_AND_TAG}")
          digest=$(jq -j .digest <<< "${manifest}")
          echo "digest=${digest}" >> "$GITHUB_OUTPUT"

          cat > "$GITHUB_STEP_SUMMARY" <<EOF
          ## ${SHORT_NAME}

          - Image name: \`${NAME_AND_TAG}\`
          - Digest: \`${digest}\`

          <details>
          <summary>Image index</summary>

          \`\`\`json
          ${manifest}
          \`\`\`
          </details>
          EOF

  attest:
    if: inputs.attest
    runs-on: ubuntu-latest
    needs: [prepare, finalize]
    permissions:
      attestations: write
      id-token: write
      packages: write
    continue-on-error: true
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate and sign provenance attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ needs.prepare.outputs.image-name }}
          subject-digest: ${{ needs.finalize.outputs.image-digest }}
          push-to-registry: true
          show-summary: false
